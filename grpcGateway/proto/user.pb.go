// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/user.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserResponse struct {
	Status               int64    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Count                int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Users                []*User  `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserResponse) Reset()         { *m = UserResponse{} }
func (m *UserResponse) String() string { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()    {}
func (*UserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{0}
}

func (m *UserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserResponse.Unmarshal(m, b)
}
func (m *UserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserResponse.Marshal(b, m, deterministic)
}
func (m *UserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResponse.Merge(m, src)
}
func (m *UserResponse) XXX_Size() int {
	return xxx_messageInfo_UserResponse.Size(m)
}
func (m *UserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserResponse proto.InternalMessageInfo

func (m *UserResponse) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *UserResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type User struct {
	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to AgeOptional:
	//	*User_Age
	AgeOptional          isUser_AgeOptional `protobuf_oneof:"age_optional"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{1}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isUser_AgeOptional interface {
	isUser_AgeOptional()
}

type User_Age struct {
	Age int64 `protobuf:"varint,3,opt,name=age,proto3,oneof"`
}

func (*User_Age) isUser_AgeOptional() {}

func (m *User) GetAgeOptional() isUser_AgeOptional {
	if m != nil {
		return m.AgeOptional
	}
	return nil
}

func (m *User) GetAge() int64 {
	if x, ok := m.GetAgeOptional().(*User_Age); ok {
		return x.Age
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*User) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*User_Age)(nil),
	}
}

type SimpleRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleRequest) Reset()         { *m = SimpleRequest{} }
func (m *SimpleRequest) String() string { return proto.CompactTextString(m) }
func (*SimpleRequest) ProtoMessage()    {}
func (*SimpleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{2}
}

func (m *SimpleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleRequest.Unmarshal(m, b)
}
func (m *SimpleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleRequest.Marshal(b, m, deterministic)
}
func (m *SimpleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleRequest.Merge(m, src)
}
func (m *SimpleRequest) XXX_Size() int {
	return xxx_messageInfo_SimpleRequest.Size(m)
}
func (m *SimpleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleRequest proto.InternalMessageInfo

func (m *SimpleRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*UserResponse)(nil), "proto.UserResponse")
	proto.RegisterType((*User)(nil), "proto.User")
	proto.RegisterType((*SimpleRequest)(nil), "proto.SimpleRequest")
}

func init() { proto.RegisterFile("proto/user.proto", fileDescriptor_d570e3e37e5899c5) }

var fileDescriptor_d570e3e37e5899c5 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xc9, 0x9f, 0x66, 0xb5, 0x93, 0x25, 0x5a, 0x66, 0xab, 0x2a, 0x14, 0x04, 0x25, 0xa7,
	0x6a, 0x0f, 0x89, 0x58, 0x6e, 0x9c, 0xf8, 0x57, 0x89, 0x0a, 0x89, 0x43, 0xaa, 0x9e, 0x91, 0xdb,
	0x0c, 0x51, 0xa4, 0x24, 0x36, 0xb1, 0x53, 0x54, 0x21, 0x2e, 0xbc, 0x02, 0x8f, 0xc6, 0x2b, 0xf0,
	0x12, 0xdc, 0x90, 0x9d, 0x14, 0x4a, 0xd4, 0x03, 0xda, 0x93, 0xfd, 0x69, 0x3c, 0xdf, 0x6f, 0xc6,
	0x1f, 0x5c, 0x8a, 0x86, 0x2b, 0x9e, 0xb4, 0x92, 0x9a, 0xd8, 0x5c, 0x71, 0x64, 0x8e, 0xe9, 0xc3,
	0x9c, 0xf3, 0xbc, 0xa4, 0x84, 0x89, 0x22, 0x61, 0x75, 0xcd, 0x15, 0x53, 0x05, 0xaf, 0x65, 0xf7,
	0x68, 0xfa, 0xa0, 0xaf, 0x1a, 0xb5, 0x69, 0x3f, 0x26, 0x54, 0x09, 0xb5, 0xef, 0x8b, 0x8f, 0x86,
	0xc5, 0xcf, 0x0d, 0x13, 0x82, 0x9a, 0xbe, 0x39, 0xda, 0xc3, 0xc5, 0x5a, 0x52, 0x93, 0x92, 0x14,
	0xbc, 0x96, 0x84, 0x13, 0xf0, 0xa4, 0x62, 0xaa, 0x95, 0xa1, 0x35, 0xb3, 0xe6, 0x4e, 0xda, 0x2b,
	0x0c, 0xe1, 0xac, 0x22, 0x29, 0x59, 0x4e, 0xa1, 0x3d, 0xb3, 0xe6, 0xe7, 0xe9, 0x41, 0xe2, 0x18,
	0x46, 0x5b, 0xde, 0xd6, 0x2a, 0x74, 0x4c, 0x43, 0x27, 0xf0, 0x09, 0x8c, 0xf4, 0x1e, 0x32, 0x74,
	0x67, 0xce, 0xdc, 0xbf, 0xf1, 0x3b, 0x5c, 0x6c, 0x58, 0x5d, 0x25, 0x7a, 0x0f, 0xae, 0x96, 0x18,
	0x80, 0x5d, 0x64, 0x3d, 0xce, 0x2e, 0x32, 0x44, 0x70, 0x6b, 0x56, 0x1d, 0x38, 0xe6, 0x8e, 0x08,
	0x8e, 0x46, 0x1b, 0xc4, 0xdb, 0x3b, 0xa9, 0x16, 0xaf, 0x02, 0xb8, 0x60, 0x39, 0x7d, 0xe0, 0x42,
	0x7f, 0x06, 0x2b, 0xa3, 0xc7, 0x70, 0x77, 0x55, 0x54, 0xa2, 0xa4, 0x94, 0x3e, 0xb5, 0x24, 0xd5,
	0xd0, 0xf8, 0xe6, 0x97, 0x0d, 0xbe, 0x26, 0xae, 0xa8, 0xd9, 0x15, 0x5b, 0xc2, 0x17, 0xe0, 0xbd,
	0x6e, 0x88, 0x29, 0xc2, 0xe3, 0xf1, 0xa6, 0x57, 0xc7, 0xb3, 0xf6, 0xff, 0x12, 0x8d, 0xbf, 0xfd,
	0xf8, 0xf9, 0xdd, 0x0e, 0xa2, 0xf3, 0x64, 0xf7, 0xd4, 0x24, 0x24, 0x9f, 0x5b, 0xd7, 0xb8, 0x04,
	0x37, 0x25, 0x96, 0xe1, 0xb8, 0x6f, 0xf9, 0x87, 0x7f, 0xda, 0x68, 0x62, 0x8c, 0x2e, 0x31, 0xf8,
	0x63, 0x94, 0x7c, 0x29, 0xb2, 0xaf, 0xb8, 0x84, 0x33, 0x6d, 0xf5, 0xb2, 0x2c, 0x71, 0x12, 0x77,
	0xa1, 0xc5, 0x87, 0xd0, 0xe2, 0x85, 0x4e, 0xf4, 0xb4, 0xdf, 0x3d, 0xe3, 0xe7, 0xe3, 0xdf, 0xc1,
	0x70, 0x01, 0xde, 0x5a, 0x64, 0xff, 0xb7, 0xd7, 0x7d, 0xd3, 0x7e, 0x15, 0x0d, 0xc6, 0xd1, 0xcb,
	0xbd, 0x03, 0xef, 0x0d, 0x95, 0xa4, 0xe8, 0x16, 0xeb, 0x5d, 0x0f, 0xfc, 0x36, 0x9e, 0x79, 0xfb,
	0xec, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x0e, 0x3b, 0x24, 0xe4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error)
	Read(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*UserResponse, error)
	ReadAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserResponse, error)
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error)
	Delete(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Read(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReadAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/ReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Delete(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	Create(context.Context, *User) (*UserResponse, error)
	Read(context.Context, *SimpleRequest) (*UserResponse, error)
	ReadAll(context.Context, *empty.Empty) (*UserResponse, error)
	Update(context.Context, *User) (*UserResponse, error)
	Delete(context.Context, *SimpleRequest) (*UserResponse, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Read(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ReadAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Delete(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _UserService_Read_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _UserService_ReadAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user.proto",
}
